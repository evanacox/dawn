name: Continuous Integration

on:
  push:
    branches:
      - master

  pull_request:
    branches:
      - master

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Cache LLVM and Clang
        if: matrix.os == 'ubuntu-latest'
        id: cache-llvm
        uses: actions/cache@v2
        with:
          path: |
            ./llvm
          key: llvm-14.0

      - name: Install LLVM and Clang
        if: matrix.os == 'ubuntu-latest'
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: "14.0"
          cached: ${{ steps.cache-llvm.outputs.cache-hit }}

      - uses: actions/setup-python@v2
        with: { python-version: "3.8" }

      - name: Lint
        run: cmake -D FORMAT_COMMAND=clang-format -P cmake/format.cmake

  coverage:
    needs: [ lint ]
    runs-on: ubuntu-latest

    # To enable coverage, delete the last line from the conditional below and
    # edit the "<name>" placeholder to your GitHub name.
    # If you do not wish to use codecov, then simply delete this job from the
    # workflow.
    if: github.repository_owner == '<name>'
      && false

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Install LCov
        run: sudo apt-get update -q
          && sudo apt-get install lcov -q -y

      - name: Configure
        run: cmake --preset=ci-coverage

      - name: Build
        run: cmake --build build/coverage -j 2

      - name: Test
        working-directory: build/coverage
        run: ./tests/dawn_test

      - name: Process coverage info
        run: cmake --build build/coverage -t coverage

      - name: Submit to codecov.io
        uses: codecov/codecov-action@v1
        with:
          file: build/coverage/coverage.info

  sanitize:
    needs: [ lint ]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Cache LLVM and Clang
        id: cache-llvm
        uses: actions/cache@v2
        with:
          path: |
            ./llvm
          key: llvm-14.0

      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: "14.0"
          cached: ${{ steps.cache-llvm.outputs.cache-hit }}

      - name: Install Benchmark
        run: sudo apt-get install -y libbenchmark-dev

      - name: Configure
        env: { CXX: clang++ }
        run: cmake --preset=ci-sanitize

      - name: Build
        run: cmake --build build/sanitize -j 2

      - name: Test
        working-directory: build/sanitize
        env:
          ASAN_OPTIONS: "strict_string_checks=1:\
          detect_stack_use_after_return=1:\
          check_initialization_order=1:\
          strict_init_order=1:\
          detect_leaks=1"
          UBSAN_OPTIONS: print_stacktrace=1
        run: ctest

  test:
    needs: [ lint ]

    strategy:
      matrix:
        os: [ macos-latest, ubuntu-latest, windows-2022 ]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Cache LLVM and Clang
        if: matrix.os == 'ubuntu-latest'
        id: cache-llvm
        uses: actions/cache@v2
        with:
          path: |
            ./llvm
          key: llvm-14.0

      - name: Install LLVM and Clang
        if: matrix.os == 'ubuntu-latest'
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: "14.0"
          cached: ${{ steps.cache-llvm.outputs.cache-hit }}

      - name: Install Benchmark
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install -y libbenchmark-dev

      - name: Set up GCC
        if: matrix.os == 'ubuntu-latest'
        uses: egor-tensin/setup-gcc@v1

      - name: Configure
        if: matrix.os == 'ubuntu-latest'
        env: { CXX: c++ }
        run: cmake --preset=ci-ubuntu

      - name: Configure
        if: matrix.os != 'ubuntu-latest'
        shell: pwsh
        run: cmake "--preset=ci-$("${{ matrix.os }}".split("-")[0])"

      - name: Build
        run: cmake --build build --config Release -j 2

      - name: Test
        working-directory: build
        run: ctest

  docs:
    # Deploy docs only when builds succeed
    needs: [ sanitize, test ]
    runs-on: ubuntu-latest

    # To enable, first you have to create an orphaned gh-pages branch:
    #
    #    git switch --orphan gh-pages
    #    git commit --allow-empty -m "Initial commit"
    #    git push -u origin gh-pages
    #
    # Edit the <name> placeholder below to your GitHub name, so this action
    # runs only in your repository and no one else's fork. After these, delete
    # this comment and the last line in the conditional below.
    # If you do not wish to use GitHub Pages for deploying documentation, then
    # simply delete this job similarly to the coverage one.
    if: github.ref == 'refs/heads/master'
      && github.event_name == 'push'
      && github.repository_owner == '<name>'
      && false

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - uses: actions/setup-python@v2
        with: { python-version: "3.8" }

      - name: Install m.css dependencies
        run: pip3 install jinja2 Pygments

      - name: Install Doxygen
        run: sudo apt-get update -q
          && sudo apt-get install doxygen -q -y

      - name: Build docs
        run: cmake "-DPROJECT_SOURCE_DIR=$PWD" "-DPROJECT_BINARY_DIR=$PWD/build"
          -P cmake/docs-ci.cmake

      - name: Deploy docs
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: build/docs/html
